4/18/20
Created a new file to start varying the susceptible population count. Hard to say, but there is little to no improvement. A reason for this is the on parameter that seems to be changing is the beta value. The steps sizes are maxing out. So things to play with are trying to create more effecients step lengths, figure out why the other parmeters seems to never change. Do I just need more steps and better step size?
4/24/20
The algortihm gets as close as it can only change beta, and doesn't not even try to change the other variables. This is good news because this will be an easier fix.
4/29/20
Things we want to try:
  -Attempt a trust region method.
  -Try approximating the hessian with the Jacobian (h approx J^T J).
    g = -J_k^T r_k

    For now, out new function for gradient and hessian, is NOT giving me a descent direction, so failing the Amijio condition.

4/28/20
  Much progress today
    Fixed the "not optimizing" in the susceptible population count. The function was not using the value but a stored one.
    Switched to using population density for measured data instead to more evenly distribute x. This helped stabilize things a great deal.

  Things I want to do still:
    -have f(x) also measure the difference in the recover population. Algorithm does not seem to get the recovered numbers even close.
    -use Jacobian to calculate derivatives.
    -Set up trust region method algorithm
    -get stupid colormap thing to work

4/29/20
  I implemented the finite Jacobian calculation and am now using it to calculate the gradient and the hessian. The function is now calculating the error of both I and R predictions. I also set up an alternate data source which creates fake data for a solution to the SIR model for testing. As a result of using it, the code is working, but slowly. I expect that implementing that hessian will help a great deal, either with a quasi newton method, or a trust region method.
