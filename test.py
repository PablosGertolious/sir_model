
import pandas as pd
import numpy as np
from numpy import linalg
from scipy.optimize import minimize
from scipy.integrate import odeint
from matplotlib import pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from pandas.plotting import register_matplotlib_converters

from numpy import genfromtxt
from numpy import recfromcsv

delta = 1e-8

def is_pos_def(x):
    return np.all(np.linalg.eigvals(x) > 0)
j = np.array([[ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00], [ 2.23717987e-05, -1.54940563e-06, -1.54940563e-06], [ 4.88125067e-05, -6.39624496e-06, -6.39624496e-06], [ 7.98308275e-05, -1.50683231e-05, -1.50683231e-05], [ 1.16088147e-04, -2.82595304e-05, -2.82595304e-05], [ 1.58073001e-04, -4.64891655e-05, -4.64891655e-05], [ 2.06671094e-04, -7.07091910e-05, -7.07091910e-05], [ 2.62762501e-04, -1.01878858e-04, -1.01878858e-04], [ 3.27209921e-04, -1.40907887e-04, -1.40907887e-04], [ 4.00843844e-04, -1.88667338e-04, -1.88667338e-04], [ 4.85150081e-04, -2.46945446e-04, -2.46945446e-04], [ 5.81156244e-04, -3.16767538e-04, -3.16767538e-04], [ 6.89019187e-04, -3.97842366e-04, -3.97842366e-04], [ 8.13684271e-04, -4.97144708e-04, -4.97144708e-04], [ 9.53989573e-04, -6.12150380e-04, -6.12150380e-04], [ 1.11185085e-03, -7.45172533e-04, -7.45172533e-04], [ 1.29040969e-03, -9.00159596e-04, -9.00159596e-04], [ 1.49161894e-03, -1.07924173e-03, -1.07924173e-03], [ 1.71816641e-03, -1.28557751e-03, -1.28557751e-03], [ 1.97282397e-03, -1.52238049e-03, -1.52238049e-03], [ 2.25875532e-03, -1.79337109e-03, -1.79337109e-03], [ 2.57930564e-03, -2.10246115e-03, -2.10246115e-03], [ 2.93865124e-03, -2.45469727e-03, -2.45469727e-03], [ 3.34083073e-03, -2.85481348e-03, -2.85481348e-03], [ 3.79004427e-03, -3.30771332e-03, -3.30771332e-03], [ 4.29193139e-03, -3.82031837e-03, -3.82031837e-03], [ 4.85281986e-03, -4.40037390e-03, -4.40037390e-03], [ 5.47793616e-03, -5.05392256e-03, -5.05392256e-03], [ 6.17413453e-03, -5.78929448e-03, -5.78929448e-03], [ 6.95096274e-03, -6.61855453e-03, -6.61855453e-03], [ 7.81510189e-03, -7.54940847e-03, -7.54940847e-03], [ 8.77483758e-03, -8.59180283e-03, -8.59180283e-03], [ 9.84424430e-03, -9.76394933e-03, -9.76394933e-03], [ 1.10319185e-02, -1.10757555e-02, -1.10757555e-02], [ 1.23489564e-02, -1.25406718e-02, -1.25406718e-02], [ 1.38122272e-02, -1.41803822e-02, -1.41803822e-02], [ 1.54363444e-02, -1.60128635e-02, -1.60128635e-02], [ 1.72350201e-02, -1.80546054e-02, -1.80546054e-02], [ 1.92274495e-02, -2.03298952e-02, -2.03298952e-02], [ 2.14370246e-02, -2.28686999e-02, -2.28686999e-02], [ 2.38820223e-02, -2.56931743e-02, -2.56931743e-02], [ 2.65898185e-02, -2.88384763e-02, -2.88384763e-02], [ 2.95849145e-02, -3.23350421e-02, -3.23350421e-02], [ 3.28946472e-02, -3.62171375e-02, -3.62171375e-02], [ 3.65569168e-02, -4.05339628e-02, -4.05339628e-02], [ 4.06008789e-02, -4.53213378e-02, -4.53213378e-02], [ 4.50680783e-02, -5.06328234e-02, -5.06328234e-02], [ 5.00025946e-02, -5.65249102e-02, -5.65249102e-02], [ 5.54435714e-02, -6.30463008e-02, -6.30463008e-02], [ 6.14539113e-02, -7.02799053e-02, -7.02799053e-02], [ 6.80799907e-02, -7.82834136e-02, -7.82834136e-02], [ 7.53813376e-02, -8.71332445e-02, -8.71332445e-02], [ 8.34338116e-02, -9.69287808e-02, -9.69287808e-02], [ 9.23034842e-02, -1.07754067e-01, -1.07754067e-01], [ 1.02076029e-01, -1.19720955e-01, -1.19720955e-01], [ 1.12830339e-01, -1.32930212e-01, -1.32930212e-01], [ 1.24672816e-01, -1.47521960e-01, -1.47521960e-01], [ 1.37695334e-01, -1.63613542e-01, -1.63613542e-01], [ 1.52025822e-01, -1.81374216e-01, -1.81374216e-01], [ 1.67774364e-01, -2.00945278e-01, -2.00945278e-01], [ 1.85088804e-01, -2.22522384e-01, -2.22522384e-01]])
h = np.matmul(j.transpose(),j)

def nearestSPD(A):
    L, Q = np.linalg.eig(A)
    t=[]
    for i in range(0,len(L)):

        if L[i] >= delta:
            t.append(0)
        else:
            t.append(delta - L[i])
    return A + np.matmul(Q,np.matmul(np.diag(t),Q.transpose()))

print(nearestSPD(h),is_pos_def(nearestSPD(h)))




# f = 24.6709;
# g = np.array([406.479,0.356689]);
# h = np.array([[862.665, 0.154211], [0.154211, 4.56843]]);
# # p = np.array([4.234,0.24234]);
#
# def quad_model(p):
#     return f + np.matmul(g.transpose(),p) + 1/2 * np.matmul(p.transpose(),np.matmul(h,p))
#
#
#
#
# def rosen_der(x):
#     return g
# def rosen_hess(x):
#     return h
# x0 = np.array([0,0])
# res = minimize(quad_model, x0, method='nelder-mead',options={'xatol': 1e-8, 'disp': True})
# p=res.x
# print(p)
